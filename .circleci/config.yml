version: 2.0
notify:
  webhooks:
    - url: https://webhooks.gitter.im/e/895d09c3165a0913ac2f
jobs:
  build:
    docker:
      - image: circleci/node:6
    working_directory: ~/redash
    steps:
      - checkout
      - restore_cache:
         keys:
           - node-modules-
      - run:
          name: Setup NPM Environment
          command: |
            npm install
      - run:
          name: build
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - ./*
      - save_cache:
         key: node-modules-
         paths:
           - node_modules
  unit_tests:
    machine: true
    working_directory: ~/redash
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install Docker Compose
          command: |
            set -x
            pip install --upgrade pip
            pip install docker-compose>=1.18
            docker-compose --version
      - run:
          name: Pull images and setup
          command: |
            set -x
            docker-compose up -d
            sleep 10
            docker-compose run --rm postgres psql -h postgres -U postgres -c "create database tests;"
      - run:
          name: Run tests
          command: docker-compose run --user root server tests
      - store_artifacts:
          path: junit.xml
      - store_artifacts:
          path: coverage.xml
  integration_tests:
    working_directory: ~/redash
    machine: true
    environment:
      REDASH_SERVER_URL : "http://127.0.0.1:5000/"
      DOCKER_IMAGE: mozilla/redash-ui-tests
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install Docker Compose
          command: |
            set -x
            pip install --upgrade pip
            pip install docker-compose>=1.18
            docker-compose --version
      - run:
          name: Pull redash images
          command: |
            set -x
            docker-compose -f docker-compose.yml up -d
            sleep 10
      - run:
          name: Pull redash-ui-tests
          command: docker pull "${DOCKER_IMAGE}":latest
      - run:
          name: Setup redash instance
          command: |
            set -x
            docker-compose run --rm --user root server create_db
            docker-compose run --rm postgres psql -h postgres -U postgres -c "create database tests"
            docker-compose run --rm --user root server /app/manage.py users create_root root@example.com "rootuser" --password "IAMROOT" --org default
            docker-compose run --rm --user root server /app/manage.py ds new "ui-tests" --type "url" --options '{"url": "uitests"}'
            docker-compose run -d -p 5000:5000 --user root server
      - run:
          name: Run tests
          command: |
            set -x
            docker run --net="host" --env REDASH_SERVER_URL="${REDASH_SERVER_URL}" "${DOCKER_IMAGE}"
      - store_artifacts:
          path: report.html
  build-deploy: # build for master or release branches
    docker:
      - image: circleci/node:6
    working_directory: ~/redash
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build and deploy
          command: bin/deploy "$CIRCLE_BRANCH"
  build-release: # build for tags
    docker:
      - image: circleci/node:6
    working_directory: ~/redash
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Tag deploy
          command: |
            set -x
            ./bin/deploy "$CIRCLE_TAG"
            ./bin/alias "$CIRCLE_TAG" "latest"
workflows:
  version: 2
  build_test_deploy_release:
    jobs:
      - build-deploy:
           requires:
             - integration_tests
             - unit_tests
           filters:
             branches:
               only:
                 - master
                 - release
      - build-release:
           requires:
             - integration_tests
             - unit_tests
           filters:
             tags:
               only: /^m[0-9]+(\.[0-9]+)?$/
             branches:
               ignore: /.*/
      - integration_tests:
          requires:
            - build
      - unit_tests:
          requires:
            - build
      - build
