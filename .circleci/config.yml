version: 2.0

jobs:
  backend-lint:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - run: pip3 install black==23.1.0 ruff==0.0.287
      - run: ruff check .
      - run: black --check .
  backend-unit-tests:
    environment:
      COMPOSE_FILE: .circleci/docker-compose.circle.yml
      COMPOSE_PROJECT_NAME: redash
    docker:
      - image: cimg/base:2025.04
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build Docker Images
          command: |
            set -x
            docker compose build --build-arg install_groups="main,all_ds,dev" --build-arg skip_frontend_build=true
            docker compose up -d
            sleep 10
      - run:
          name: Create Test Database
          command: docker compose -p redash run --rm postgres psql -h postgres -U postgres -c "create database tests;"
      - run:
          name: List Enabled Query Runners
          command: docker compose -p redash run --rm redash manage ds list_types
      - run:
          name: Run Tests
          command: docker compose -p redash run --name tests redash tests --junitxml=junit.xml --cov-report=xml --cov=redash --cov-config=.coveragerc tests/
      - run:
          name: Copy Test Results
          command: |
            mkdir -p /tmp/test-results/unit-tests
            docker cp tests:/app/coverage.xml ./coverage.xml
            docker cp tests:/app/junit.xml /tmp/test-results/unit-tests/results.xml
          when: always
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: coverage.xml
  frontend-lint:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - run: mkdir -p /tmp/test-results/eslint
      - run: |
          npm install --global --force yarn@$1.22.22
          yarn cache clean && yarn --frozen-lockfile --network-concurrency 1
      - run: yarn lint:ci
      - store_test_results:
          path: /tmp/test-results
  frontend-unit-tests:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - run: sudo apt update
      - run: sudo apt install python3-pip
      - run: sudo pip3 install -r requirements_bundles.txt
      - run: |
          npm install --global --force yarn@$1.22.22
          yarn cache clean && yarn --frozen-lockfile --network-concurrency 1
      - run:
          name: Run App Tests
          command: yarn test
      - run:
          name: Run Visualizations Tests
          command: (cd viz-lib && yarn test)
      - run: yarn lint

  frontend-e2e-tests:
    environment:
      COMPOSE_FILE: .ci/compose.cypress.yml
      COMPOSE_PROJECT_NAME: cypress
      CYPRESS_INSTALL_BINARY: 0
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 1
      # PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
      # CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
      # CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
    docker:
      - image: cimg/node:18.20
    steps:
      - run: checkout
      - run:
          name: Install Dependencies
          command: |
            npm install --global --force yarn@$1.22.22
            yarn cache clean && yarn --frozen-lockfile --network-concurrency 1
      # - name: Enable Code Coverage Report For Master Branch
      #   if: endsWith(github.ref, '/master')
      #   run: |
      #     echo "CODE_COVERAGE=true" >> "$GITHUB_ENV"
      - run:
          name: Setup Redash Server
          command: |
            set -x
            yarn cypress build
            yarn cypress start -- --skip-db-seed
            docker compose run cypress yarn cypress db-seed
      - run:
          name: Execute Cypress Tests
          command: yarn cypress run-ci
      # - name: "Failure: output container logs to console"
      #   if: failure()
      #   run: docker compose logs
      - run:
          name: Copy Code Coverage Results
          command: docker cp cypress:/usr/src/app/coverage ./coverage || true
      # - name: Store Coverage Results
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage
      #     path: coverage
  build-docker-image:
    docker:
      - image: cimg/node:18.20
    steps:
      - setup_remote_docker
      - checkout
      - run: echo "export MOZILLA_VERSION=master" >> $BASH_ENV
      - run: sudo apt update
      - run: sudo apt install python3-pip
      - run: sudo pip3 install -r requirements_bundles.txt
      - run: .ci/update_version
      # Bundle extensions:
      # - run: npm run bundle
      - run: .ci/docker_build
  build-docker-image-tag:
    docker:
      - image: cimg/node:18.20
    steps:
      - setup_remote_docker
      - checkout
      - run: echo "export MOZILLA_VERSION=$CIRCLE_TAG" >> $BASH_ENV
      - run: sudo apt update
      - run: sudo apt install python3-pip
      - run: sudo pip3 install -r requirements_bundles.txt
      - run: .ci/update_version
      # Bundle extensions:
      # - run: npm run bundle
      - run: .ci/docker_build
      # Create alias from tag to "latest":
      - run: docker tag $DOCKERHUB_REPO:$CIRCLE_TAG $DOCKERHUB_REPO:latest
      - run: docker push $DOCKERHUB_REPO:latest
workflows:
  version: 2
  build:
    jobs:
      - backend-lint:
          filters:
            tags:
              only: /^m[0-9]+(\.[0-9]+)?$/
      - backend-unit-tests:
          filters:
            tags:
              only: /^m[0-9]+(\.[0-9]+)?$/
          requires:
            - backend-lint
      - frontend-lint:
          filters:
            tags:
              only: /^m[0-9]+(\.[0-9]+)?$/
      - frontend-unit-tests:
          filters:
            tags:
              only: /^m[0-9]+(\.[0-9]+)?$/
          requires:
            - backend-lint
            - frontend-lint
      - build-docker-image:
          requires:
            - backend-unit-tests
            - frontend-unit-tests
          filters:
            branches:
              only:
                - master
      - build-docker-image-tag:
          requires:
            - backend-unit-tests
            - frontend-unit-tests
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^m[0-9]+(\.[0-9]+)?$/
